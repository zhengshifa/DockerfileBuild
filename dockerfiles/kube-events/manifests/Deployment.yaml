apiVersion: apps/v1
kind: Deployment
metadata:
  name: {name}
  namespace: {namespace}
  labels:
    app:  kube-events-ai
spec:
  selector:
    matchLabels:
      app: kube-events-ai
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app:  kube-events-ai
    spec:
      # initContainers:
        # Init containers are exactly like regular containers, except:
          # - Init containers always run to completion.
          # - Each init container must complete successfully before the next one starts.
      serviceAccountName: kube-events-ai-sa
      containers:
      - name:  kube-events-ai-container
        image: {image}
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 500m
            memory: 500Mi
        env:
            # If TZ is assigned, set the TZ value as the time zone
        - name: openai_api_key
          valueFrom:
            secretKeyRef:
              name: openai-secret
              key: openai_api_key
        - name: HTTP_PROXY
          value: http://admin:admin@gproxy-service.default.svc.cluster.local:7890
        - name: HTTPS_PROXY
          value: http://admin:admin@gproxy-service.default.svc.cluster.local:7890
        - name: NO_PROXY
          value: kubernetes.default,gproxy-service.default.svc.cluster.local
        volumeMounts:
        - name: localtime
          mountPath: /etc/localtime
      volumes:
        - name: localtime
          hostPath:
            path: /usr/share/zoneinfo/Asia/Shanghai
      restartPolicy: Always
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-events-ai-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: my-clusterrole
rules:
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: my-clusterrolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: my-clusterrole
subjects:
- kind: ServiceAccount
  name: kube-events-ai-sa
  namespace: {namespace}